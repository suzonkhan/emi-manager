<?php

namespace App\Repositories\TokenAssignment;

use App\Models\Token;
use App\Models\TokenAssignment;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;

class TokenAssignmentRepository implements TokenAssignmentRepositoryInterface
{
    /**
     * Create a new token assignment record
     */
    public function create(array $data): TokenAssignment
    {
        return TokenAssignment::create($data);
    }

    /**
     * Get assignment history for a token
     */
    public function getTokenHistory(Token $token): Collection
    {
        return TokenAssignment::where('token_id', $token->id)
            ->with(['fromUser', 'toUser'])
            ->orderBy('created_at')
            ->get();
    }

    /**
     * Get assignment history for a user
     */
    public function getUserAssignmentHistory(User $user): Collection
    {
        return TokenAssignment::where(function ($query) use ($user) {
            $query->where('from_user_id', $user->id)
                ->orWhere('to_user_id', $user->id);
        })
            ->with(['token', 'fromUser', 'toUser'])
            ->orderBy('created_at', 'desc')
            ->get();
    }

    /**
     * Record token generation
     */
    public function recordGeneration(Token $token, User $generator, array $metadata = []): TokenAssignment
    {
        return $this->create([
            'token_id' => $token->id,
            'from_user_id' => null,
            'to_user_id' => $generator->id,
            'action' => 'generated',
            'from_role' => null,
            'to_role' => $generator->role,
            'notes' => "Token generated by {$generator->name} ({$generator->role})",
            'metadata' => array_merge([
                'generated_at' => now()->toISOString(),
            ], $metadata),
        ]);
    }

    /**
     * Record token assignment
     */
    public function recordAssignment(Token $token, User $fromUser, User $toUser, array $metadata = []): TokenAssignment
    {
        return $this->create([
            'token_id' => $token->id,
            'from_user_id' => $fromUser->id,
            'to_user_id' => $toUser->id,
            'action' => 'assigned',
            'from_role' => $fromUser->role,
            'to_role' => $toUser->role,
            'notes' => "Assigned from {$fromUser->name} ({$fromUser->role}) to {$toUser->name} ({$toUser->role})",
            'metadata' => array_merge([
                'assigned_at' => now()->toISOString(),
            ], $metadata),
        ]);
    }

    /**
     * Record token usage
     */
    public function recordUsage(Token $token, User $user, array $metadata = []): TokenAssignment
    {
        return $this->create([
            'token_id' => $token->id,
            'from_user_id' => $user->id,
            'to_user_id' => null,
            'action' => 'used',
            'from_role' => $user->role,
            'to_role' => null,
            'notes' => "Token used by {$user->name} ({$user->role})",
            'metadata' => array_merge([
                'used_at' => now()->toISOString(),
            ], $metadata),
        ]);
    }

    /**
     * Get assignment chain for a token
     */
    public function getAssignmentChain(Token $token): Collection
    {
        return $this->getTokenHistory($token);
    }

    /**
     * Get latest assignment for a token
     */
    public function getLatestAssignment(Token $token): ?TokenAssignment
    {
        return TokenAssignment::where('token_id', $token->id)
            ->with(['fromUser', 'toUser'])
            ->latest()
            ->first();
    }

    /**
     * Get assignments by action type
     */
    public function getAssignmentsByAction(string $action): Collection
    {
        return TokenAssignment::where('action', $action)
            ->with(['token', 'fromUser', 'toUser'])
            ->orderBy('created_at', 'desc')
            ->get();
    }

    /**
     * Get assignments between date range
     */
    public function getAssignmentsByDateRange(\DateTime $startDate, \DateTime $endDate): Collection
    {
        return TokenAssignment::whereBetween('created_at', [$startDate, $endDate])
            ->with(['token', 'fromUser', 'toUser'])
            ->orderBy('created_at', 'desc')
            ->get();
    }
}
