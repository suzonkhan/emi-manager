<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class TokenResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        // Compute display status based on context
        $displayStatus = $this->getDisplayStatus($request->user());
        
        return [
            'id' => $this->id,
            'code' => $this->code,
            'status' => $this->status,
            'display_status' => $displayStatus, // Human-readable status for UI
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,

            // Creator information
            'creator' => $this->creator ? [
                'id' => $this->creator->id,
                'name' => $this->creator->name,
                'role' => $this->creator->getRoleNames()->first(),
            ] : null,

            // Current assignment
            'assigned_to' => $this->when($this->assignedTo, [
                'id' => $this->assignedTo?->id,
                'name' => $this->assignedTo?->name,
                'role' => $this->assignedTo?->getRoleNames()->first(),
            ]),

            // Usage information
            'used_by' => $this->when($this->usedBy, [
                'id' => $this->usedBy?->id,
                'name' => $this->usedBy?->name,
                'role' => $this->usedBy?->getRoleNames()->first(),
            ]),

            // Customer information if token is used
            'customer' => $this->when($this->customer, function () {
                return [
                    'id' => $this->customer->id,
                    'name' => $this->customer->name,
                    'phone' => $this->customer->mobile,
                    'financed_amount' => $this->customer->product_price - $this->customer->down_payment,
                ];
            }),

            // Complete assignment history chain
            'assignment_history' => $this->assignments->map(function ($assignment) {
                return [
                    'id' => $assignment->id,
                    'action' => $assignment->action,
                    'timestamp' => $assignment->created_at,
                    'from_user' => $assignment->fromUser ? [
                        'id' => $assignment->fromUser->id,
                        'name' => $assignment->fromUser->name,
                        'role' => $assignment->from_role,
                    ] : null,
                    'to_user' => $assignment->toUser ? [
                        'id' => $assignment->toUser->id,
                        'name' => $assignment->toUser->name,
                        'role' => $assignment->to_role,
                    ] : null,
                    'notes' => $assignment->notes,
                    'metadata' => $assignment->metadata,
                ];
            })->sortBy('timestamp')->values(),

            // Summary information
            'assignment_chain_summary' => $this->getAssignmentChainSummary(),
            'total_assignments' => $this->assignments->count(),
            'is_available' => $this->status === 'assigned' && $this->assigned_to,
            'is_used' => $this->status === 'used',
        ];
    }

    /**
     * Get assignment chain summary for easy understanding
     */
    private function getAssignmentChainSummary(): array
    {
        $chain = [];
        $assignments = $this->assignments->sortBy('created_at');

        foreach ($assignments as $assignment) {
            switch ($assignment->action) {
                case 'generated':
                    $generatorName = $assignment->fromUser?->name ?? 'System';
                    $chain[] = "Generated by {$generatorName} ({$assignment->from_role})";
                    break;
                case 'assigned':
                    $fromName = $assignment->fromUser?->name ?? 'System';
                    $toName = $assignment->toUser?->name ?? 'Unknown';
                    $chain[] = "Assigned from {$fromName} ({$assignment->from_role}) to {$toName} ({$assignment->to_role})";
                    break;
                case 'used':
                    $userName = $assignment->fromUser?->name ?? 'Unknown';
                    $customerName = $assignment->metadata['customer_name'] ?? 'Customer';
                    $chain[] = "Used by {$userName} ({$assignment->from_role}) for customer: {$customerName}";
                    break;
            }
        }

        return $chain;
    }

    /**
     * Get display status for the current user context
     */
    private function getDisplayStatus($currentUser): string
    {
        // If token is used, always show "Used"
        if ($this->status === 'used') {
            return 'used';
        }

        // If token is available (not assigned to anyone), show "Available"
        if ($this->status === 'available' && !$this->assigned_to) {
            return 'available';
        }

        // If token is assigned
        if ($this->status === 'assigned' && $this->assigned_to) {
            // Check if it's assigned to the current user or to someone else
            if ($this->assigned_to === $currentUser->id) {
                return 'available'; // Token assigned to me = available for me to use
            } else {
                return 'distributed'; // Token assigned to someone else = I distributed it
            }
        }

        // Default fallback
        return $this->status;
    }
}
